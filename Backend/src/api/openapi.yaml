openapi: 3.0.0
info:
  title: StudentSocial
  version: "1.0"
  description: Die StudentSocial Website ist eine Single Page App im Frontend und ein REST Webservice im Backend. Dadurch sollen Studenten und andere Objekte in einer Datenbank gespeichert werden.
  contact:
    name: WWI20B4 Gruppe
    email: mai.julian@student.dhbw-karlsruhe.de
    url: "https://www.google.de"
  license:
    name: ABC-Lizenz
    url: "https://www.google.de"
  termsOfService: "https://www.google.de"
servers:
  - url: "http://localhost:3000"
    description: Lokale Entwicklung
paths:
  /:
    get:
      summary: Wurzeladresse des Webservices
      tags:
        - Start
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HATEOAS_Collection"
      operationId: get
      description: HATEOAS-Verlinkungen auf die einzelnen Collections des Webservices liefern
  /student:
    get:
      summary: Studentenliste durchsuchen
      tags:
        - Studentenliste
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
      operationId: get-student
      description: Studenten suchen. Für die Suche können über die URL verschiedene Suchparameter angegeben werden. Die Antwort wird immer in einer Liste mit den gefundenen Studenten geliefert
      parameters:
        - schema:
            type: string
          in: query
          name: first_name
          description: Gesuchter Vorname
        - schema:
            type: string
          in: query
          name: last_name
          description: Gesuchter Nachname
        - schema:
            type: string
          in: query
          name: course
          description: Gesuchter Studiengang
        - schema:
            type: string
          in: query
          name: course_id
          description: Gesuchte Kursnummer
        - schema:
            type: string
          in: query
          name: matrikel_nr
          description: Gesuchte Matrikelnummer
        - schema:
            type: string
          in: query
          description: Gesuchte Fakultät
          name: fakultaet
        - schema:
            type: string
          in: query
          name: logged
          description: Suchen ob Student eingeloggt ist
        - schema:
            type: string
          in: query
          name: direction
          description: Gesuchte Studienrichtung
        - schema:
            type: string
          in: query
          name: email
          description: Gesuchte E-Mail
        - schema:
            type: string
          in: query
          name: reminder
          description: Suche ob Notofikation erwünscht ist
    post:
      summary: Neuer Student anlegen
      tags:
        - Studentenliste
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
          headers:
            location:
              schema:
                type: string
      operationId: post-student
      description: Eine neuen Student anlegen. Hierzu wird ein vollständiges Student-Objekt an den Server geschickt.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        description: "Body, der Informationen für den anzulegenden Studenten enthält"
  "/student/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Student überschreiben
      tags:
        - Student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Not Found
      operationId: put-student-id
      description: "Daten eines Studenteintags überschreiben. Dazu muss der Vollständige Datensatz an den Server geschickt werden, inklusive der Felder, die nicht geändert werden."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
    patch:
      summary: Einzelnes Feld ändern
      tags:
        - Student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Not Found
      operationId: patch-student-id
      description: "Daten eines Studenteintags überschreiben. Bei der PATCH Anfrage müssen nur die Felder mitgegeben werden, die tatsächlich geändert werden sollen"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
    delete:
      summary: Student löschen
      tags:
        - Student
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
      operationId: delete-student-id
      description: Einen Studenteintrag löschen
    get:
      summary: Student lesen
      tags:
        - Student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Not Found
      operationId: get-student-id
      description: Details zu einem einzelnen Studenten
  /openapi.yaml:
    get:
      summary: OpenAPI-Spezifikation des Webservices
      tags:
        - Start
      responses:
        "200":
          description: OK
      operationId: get-openapi.yaml
      description: Anzeige der OpenAPI des Webservices
components:
  schemas:
    Student:
      title: Student
      type: object
      description: |-
        Eintrag in der Datenbank um eine Übersicht über alle Studenten zu erhalten.
        Dieser Betseht aus Pronomen, Vorname, Nachname, Geburtsdatum, Geschlecht und Studiengang.
        Die ID wird mit der Datenbank generiert.
      properties:
        _links:
          $ref: "#/components/schemas/HATEOAS_Resource"
        _id:
          type: string
        matrikel_nr:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        birthday:
          type: string
        fakultaet:
          type: string
        course:
          type: string
        direction:
          type: string
        course_id:
          type: string
        email:
          type: string
        password:
          type: string
        logged:
          type: string
        reminder:
          type: string
      required:
        - matrikel_nr
        - first_name
        - last_name
        - email
        - password
    HATEOAS_Collection:
      title: HATEOAS_Collection
      type: object
      description: HATEOAS-Verlinkung zu einer einzelnen Collection (Liste von Daten) des Webservices.
      properties:
        _name:
          type: string
        query:
          $ref: "#/components/schemas/HATEOAS_Link"
        create:
          $ref: "#/components/schemas/HATEOAS_Link"
    HATEOAS_Resource:
      title: HATEOAS_Resource
      type: object
      description: "HATEOAS-Verlinkungen zu einem einzelnen Datensatz / Adressbucheintrag. Definiert, wie der Eintrag gelesen, aktualisiert, gepatcht oder gelöscht werden kann."
      properties:
        read:
          $ref: "#/components/schemas/HATEOAS_Link"
        update:
          $ref: "#/components/schemas/HATEOAS_Link"
        patch:
          $ref: "#/components/schemas/HATEOAS_Link"
        delete:
          $ref: "#/components/schemas/HATEOAS_Link"
    HATEOAS_Link:
      title: HATEOAS_Link
      type: object
      description: "Eine einzelner HATEOAS-Verlinkung innerhalb des Webservices. Definiert die Adresse, URL und Query Parameter zum Aufruf der jeweiligen Aktion."
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string
tags:
  - name: Start
  - name: Student
  - name: Studentenliste
